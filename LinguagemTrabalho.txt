Estrutura das funcoes � a seguinte: XYZ v[n], v[m], v[o]...

definindo:
1 - Suporte dos tipos de dados: inteiro, real, caractere.
2 - Os comandos a serem tratados sao:
    - Comandos de atribuicao.
    - Comandos de entrada e sa?da.
    - Comandos condicionais.
    - Comandos de repeticao.
3 - Operadores relacionais (=, >=, <=, >, <, ! =).
4 - Operadores logicos (and, or, not).
5 - Operadores aritmeticos (+, ?, ?, /, mod).
6 - Simbolos especiais (. , : ; ( ) { })
7 - Blocos de comandos delimitados por begin/end ou { }.
8 - Lista de palavras reservadas.

comando         - PALAVRA RESERVADA

1 -     
inteiro         - INT
real            - REA
caractere       - CHR

2 - 
atribuicao      - ATR
entrada         - INP
saida           - OUT
condicional:    
    se          - IIF

repeticao:  
    enquanto    - RPT


3 - 
igual           - EQL
maior           - GRT
menor           - LES
maior igual     - GTE
menor igual     - LTE
diferente       - DIF

4 - 
e               - AND
ou              - OOR
nao             - NOT

5 -
soma            - ADD
subtracao       - SUB
multiplicacao   - MUL
divisao         - DIV
modulo          - MOD

6 -
, '       

7 -
inicio          - BGN
fim             - END

8 -
Tipo de dado    - INT, REA, CHR
entrada/saida   - INP, OUT
operadores      - ADD, SUB, MUL, DIV, MOD, EQL, DIF, GRT, LES, GTE, LTE, AND, OOR, NOT
condicionais    - IIF
repeticao       - RPT
delimitadores   - BGN, END

exemplos
INT a, *numero*    cria uma variavel inteira chamada a
REA b, *numero*    cria uma variavel real chamada b
CHR c, *numero*    cria uma variavel caractere chamada c

ATR a, 5    atribui o valor 5 a variavel a
INP a       le um valor para a
OUT a       escreve o valor de a

ADD a, b, c soma os valores de a e b e atribui a c
SUB a, b, c subtrai os valores de a e b e atribui a c
MUL a, b, c multiplica os valores de a e b e atribui a c
DIV a, b, c divide os valores de a e b e atribui a c
MOD a, b, c calcula o modulo dos valores de a e b e atribui a c

EQL a, b, c verifica se a e b sao iguais e atribui a c
DIF a, b, c verifica se a e b sao diferentes e atribui a c
GRT a, b, c verifica se a � maior que b e atribui a c
LES a, b, c verifica se a � menor que b e atribui a c
GTE a, b, c verifica se a � maior ou igual a b e atribui a c
LTE a, b, c verifica se a � menor ou igual a b e atribui a c


AND a, b, c verifica se a e b sao verdadeiros e atribui a c
OOR a, b, c verifica se a ou b sao verdadeiros e atribui a c
NOT a, b    verifica se a � falso e atribui a b

LBL t       cria um bloco de comandos label
BGN         inicio do bloco de comandos
    //comandos
END         fim do bloco de comandos

IIF a, t   se a for verdadeiro(!= 0), executa o bloco de comandos t
ELS t      senao, executa o bloco de comandos t
RPT a, t   enquanto a for verdadeiro(!= 0), executa o bloco de comandos t

exemplos de codigo
hello world
CHR a, 0
ATR a, 'H'
OUT a
ATR a, 'E'
OUT a
ATR a, 'L'
OUT a
OUT a
ATR a, 'O'
OUT a
ATR a, ' '
OUT a
ATR a, 'W'
OUT a
ATR a, 'O'
OUT a
ATR a, 'R'
OUT a
ATR a, 'L'
OUT a
ATR a, 'D'
OUT a

soma de dois numeros
INT a, 0
INT b, 0
INT c, 0
INP a
INP b
ADD a, b, c
OUT c

febonacci
INT a, 0
INT b, 0
INT c, 0
INT i, 0

ATR a, 0
ATR b, 1
ATR i, 0

LBL t
BGN
    OUT a
    ADD a, b, c
    ATR a, b
    ATR b, c
    ADD i, 1, i
    LES i, 10, a
END

RPT a, t

if else simples
INT a, 0
INT b, 10
INT c, 0
INP a

GRT a, b, c

LBL t
BGN
    OUT a   
END

LBL e
BGN
    OUT b
END

IIF c, t
ELS e

Express�es Regulares dos Tokens: 

letra = [ A-Za-z ] 
digito = [ 0-9 ] 
KEYWORD = letra letra letra 
IDENTIFIER = letra ( letra | digito )* 
COMMA = , 
DOT = . 
OPEN_QUOTE = ? 
CLOSE_QUOTE = ? 
NUMBER = digito+ ( DOT digito* | ? ) 
CHARACTER = OPEN_QUOTE letra CLOSE_QUOTE 

teste de expressoes regulares
INT a, 0
INT b, 0
INP a
INP b
ADD a, b, c

resultado esperado
<KEYWORD, INT> <IDENTIFIER, a> <COMMA, > <NUMBER, 0> <KEYWORD, INT> <IDENTIFIER, b> <COMMA, > <NUMBER, 0> 
<KEYWORD, INP> <IDENTIFIER, a> <KEYWORD, INP> <IDENTIFIER, b>
<KEYWORD, ADD> <IDENTIFIER, a> <COMMA, > <IDENTIFIER, b> <COMMA, > <IDENTIFIER, c>  

INT 	- Declara um n�mero inteiro
REA 	- Declara um n�mero real
CHR 	- Declara um caractere
ATR 	- Atribui um valor em uma vari�vel
INP 	- L� um valor para uma vari�vel
OUT     - Escreve um valor de uma vari�vel
ADD     - Soma dois valores e atribui a um terceiro
SUB     - Subtrai dois valores e atribui a um terceiro
MUL     - Multiplica dois valores e atribui a um terceiro
DIV     - Divide dois valores e atribui a um terceiro
MOD     - Calcula o m�dulo de dois valores e atribui a um terceiro
EQL     - Verifica se dois valores s�o iguais e atribui a um terceiro
DIF     - Verifica se dois valores s�o diferentes e atribui a um terceiro
GRT     - Verifica se um valor � maior que outro e atribui a um terceiro
LES     - Verifica se um valor � menor que outro e atribui a um terceiro
GTE     - Verifica se um valor � maior ou igual a outro e atribui a um terceiro
LTE     - Verifica se um valor � menor ou igual a outro e atribui a um terceiro
AND     - Verifica se dois valores s�o verdadeiros e atribui a um terceiro
OOR     - Verifica se um dos dois valores � verdadeiro e atribui a um terceiro
NOT     - Verifica se um valor � falso e atribui a um terceiro
LBL     - Cria um bloco de comandos label
BGN     - In�cio do bloco de comandos
END     - Fim do bloco de comandos
IIF     - Se um valor for verdadeiro, executa um bloco de comandos
ELS     - Sen�o, executa um bloco de comandos
RPT     - Enquanto um valor for verdadeiro, executa um bloco de comandos
